// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/auth-service-api.pb.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	api "github.com/influenzanet/user-management-service/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthServiceApiClient is a mock of AuthServiceApiClient interface
type MockAuthServiceApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceApiClientMockRecorder
}

// MockAuthServiceApiClientMockRecorder is the mock recorder for MockAuthServiceApiClient
type MockAuthServiceApiClientMockRecorder struct {
	mock *MockAuthServiceApiClient
}

// NewMockAuthServiceApiClient creates a new mock instance
func NewMockAuthServiceApiClient(ctrl *gomock.Controller) *MockAuthServiceApiClient {
	mock := &MockAuthServiceApiClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceApiClient) EXPECT() *MockAuthServiceApiClientMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockAuthServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockAuthServiceApiClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAuthServiceApiClient)(nil).Status), varargs...)
}

// LoginWithEmail mocks base method
func (m *MockAuthServiceApiClient) LoginWithEmail(ctx context.Context, in *api.LoginWithEmailMsg, opts ...grpc.CallOption) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithEmail", varargs...)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmail indicates an expected call of LoginWithEmail
func (mr *MockAuthServiceApiClientMockRecorder) LoginWithEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockAuthServiceApiClient)(nil).LoginWithEmail), varargs...)
}

// SignupWithEmail mocks base method
func (m *MockAuthServiceApiClient) SignupWithEmail(ctx context.Context, in *api.SignupWithEmailMsg, opts ...grpc.CallOption) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignupWithEmail", varargs...)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupWithEmail indicates an expected call of SignupWithEmail
func (mr *MockAuthServiceApiClientMockRecorder) SignupWithEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupWithEmail", reflect.TypeOf((*MockAuthServiceApiClient)(nil).SignupWithEmail), varargs...)
}

// SwitchProfile mocks base method
func (m *MockAuthServiceApiClient) SwitchProfile(ctx context.Context, in *api.ProfileRequest, opts ...grpc.CallOption) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchProfile", varargs...)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchProfile indicates an expected call of SwitchProfile
func (mr *MockAuthServiceApiClientMockRecorder) SwitchProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchProfile", reflect.TypeOf((*MockAuthServiceApiClient)(nil).SwitchProfile), varargs...)
}

// ValidateJWT mocks base method
func (m *MockAuthServiceApiClient) ValidateJWT(ctx context.Context, in *api.JWTRequest, opts ...grpc.CallOption) (*api.TokenInfos, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateJWT", varargs...)
	ret0, _ := ret[0].(*api.TokenInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateJWT indicates an expected call of ValidateJWT
func (mr *MockAuthServiceApiClientMockRecorder) ValidateJWT(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWT", reflect.TypeOf((*MockAuthServiceApiClient)(nil).ValidateJWT), varargs...)
}

// RenewJWT mocks base method
func (m *MockAuthServiceApiClient) RenewJWT(ctx context.Context, in *api.RefreshJWTRequest, opts ...grpc.CallOption) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenewJWT", varargs...)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewJWT indicates an expected call of RenewJWT
func (mr *MockAuthServiceApiClientMockRecorder) RenewJWT(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewJWT", reflect.TypeOf((*MockAuthServiceApiClient)(nil).RenewJWT), varargs...)
}

// ValidateAppToken mocks base method
func (m *MockAuthServiceApiClient) ValidateAppToken(ctx context.Context, in *api.AppTokenRequest, opts ...grpc.CallOption) (*api.AppTokenValidation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateAppToken", varargs...)
	ret0, _ := ret[0].(*api.AppTokenValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAppToken indicates an expected call of ValidateAppToken
func (mr *MockAuthServiceApiClientMockRecorder) ValidateAppToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAppToken", reflect.TypeOf((*MockAuthServiceApiClient)(nil).ValidateAppToken), varargs...)
}

// GenerateTempToken mocks base method
func (m *MockAuthServiceApiClient) GenerateTempToken(ctx context.Context, in *api.TempTokenInfo, opts ...grpc.CallOption) (*api.TempToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateTempToken", varargs...)
	ret0, _ := ret[0].(*api.TempToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTempToken indicates an expected call of GenerateTempToken
func (mr *MockAuthServiceApiClientMockRecorder) GenerateTempToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTempToken", reflect.TypeOf((*MockAuthServiceApiClient)(nil).GenerateTempToken), varargs...)
}

// ValidateTempToken mocks base method
func (m *MockAuthServiceApiClient) ValidateTempToken(ctx context.Context, in *api.TempToken, opts ...grpc.CallOption) (*api.TempTokenInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateTempToken", varargs...)
	ret0, _ := ret[0].(*api.TempTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTempToken indicates an expected call of ValidateTempToken
func (mr *MockAuthServiceApiClientMockRecorder) ValidateTempToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTempToken", reflect.TypeOf((*MockAuthServiceApiClient)(nil).ValidateTempToken), varargs...)
}

// GetTempTokens mocks base method
func (m *MockAuthServiceApiClient) GetTempTokens(ctx context.Context, in *api.TempTokenInfo, opts ...grpc.CallOption) (*api.TempTokenInfos, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTempTokens", varargs...)
	ret0, _ := ret[0].(*api.TempTokenInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempTokens indicates an expected call of GetTempTokens
func (mr *MockAuthServiceApiClientMockRecorder) GetTempTokens(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempTokens", reflect.TypeOf((*MockAuthServiceApiClient)(nil).GetTempTokens), varargs...)
}

// DeleteTempToken mocks base method
func (m *MockAuthServiceApiClient) DeleteTempToken(ctx context.Context, in *api.TempToken, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTempToken", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTempToken indicates an expected call of DeleteTempToken
func (mr *MockAuthServiceApiClientMockRecorder) DeleteTempToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTempToken", reflect.TypeOf((*MockAuthServiceApiClient)(nil).DeleteTempToken), varargs...)
}

// PurgeUserTempTokens mocks base method
func (m *MockAuthServiceApiClient) PurgeUserTempTokens(ctx context.Context, in *api.TempTokenInfo, opts ...grpc.CallOption) (*api.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurgeUserTempTokens", varargs...)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeUserTempTokens indicates an expected call of PurgeUserTempTokens
func (mr *MockAuthServiceApiClientMockRecorder) PurgeUserTempTokens(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeUserTempTokens", reflect.TypeOf((*MockAuthServiceApiClient)(nil).PurgeUserTempTokens), varargs...)
}

// MockAuthServiceApiServer is a mock of AuthServiceApiServer interface
type MockAuthServiceApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceApiServerMockRecorder
}

// MockAuthServiceApiServerMockRecorder is the mock recorder for MockAuthServiceApiServer
type MockAuthServiceApiServerMockRecorder struct {
	mock *MockAuthServiceApiServer
}

// NewMockAuthServiceApiServer creates a new mock instance
func NewMockAuthServiceApiServer(ctrl *gomock.Controller) *MockAuthServiceApiServer {
	mock := &MockAuthServiceApiServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceApiServer) EXPECT() *MockAuthServiceApiServerMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockAuthServiceApiServer) Status(arg0 context.Context, arg1 *empty.Empty) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockAuthServiceApiServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAuthServiceApiServer)(nil).Status), arg0, arg1)
}

// LoginWithEmail mocks base method
func (m *MockAuthServiceApiServer) LoginWithEmail(arg0 context.Context, arg1 *api.LoginWithEmailMsg) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmail indicates an expected call of LoginWithEmail
func (mr *MockAuthServiceApiServerMockRecorder) LoginWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockAuthServiceApiServer)(nil).LoginWithEmail), arg0, arg1)
}

// SignupWithEmail mocks base method
func (m *MockAuthServiceApiServer) SignupWithEmail(arg0 context.Context, arg1 *api.SignupWithEmailMsg) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupWithEmail", arg0, arg1)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupWithEmail indicates an expected call of SignupWithEmail
func (mr *MockAuthServiceApiServerMockRecorder) SignupWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupWithEmail", reflect.TypeOf((*MockAuthServiceApiServer)(nil).SignupWithEmail), arg0, arg1)
}

// SwitchProfile mocks base method
func (m *MockAuthServiceApiServer) SwitchProfile(arg0 context.Context, arg1 *api.ProfileRequest) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchProfile", arg0, arg1)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchProfile indicates an expected call of SwitchProfile
func (mr *MockAuthServiceApiServerMockRecorder) SwitchProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchProfile", reflect.TypeOf((*MockAuthServiceApiServer)(nil).SwitchProfile), arg0, arg1)
}

// ValidateJWT mocks base method
func (m *MockAuthServiceApiServer) ValidateJWT(arg0 context.Context, arg1 *api.JWTRequest) (*api.TokenInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWT", arg0, arg1)
	ret0, _ := ret[0].(*api.TokenInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateJWT indicates an expected call of ValidateJWT
func (mr *MockAuthServiceApiServerMockRecorder) ValidateJWT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWT", reflect.TypeOf((*MockAuthServiceApiServer)(nil).ValidateJWT), arg0, arg1)
}

// RenewJWT mocks base method
func (m *MockAuthServiceApiServer) RenewJWT(arg0 context.Context, arg1 *api.RefreshJWTRequest) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewJWT", arg0, arg1)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewJWT indicates an expected call of RenewJWT
func (mr *MockAuthServiceApiServerMockRecorder) RenewJWT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewJWT", reflect.TypeOf((*MockAuthServiceApiServer)(nil).RenewJWT), arg0, arg1)
}

// ValidateAppToken mocks base method
func (m *MockAuthServiceApiServer) ValidateAppToken(arg0 context.Context, arg1 *api.AppTokenRequest) (*api.AppTokenValidation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAppToken", arg0, arg1)
	ret0, _ := ret[0].(*api.AppTokenValidation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAppToken indicates an expected call of ValidateAppToken
func (mr *MockAuthServiceApiServerMockRecorder) ValidateAppToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAppToken", reflect.TypeOf((*MockAuthServiceApiServer)(nil).ValidateAppToken), arg0, arg1)
}

// GenerateTempToken mocks base method
func (m *MockAuthServiceApiServer) GenerateTempToken(arg0 context.Context, arg1 *api.TempTokenInfo) (*api.TempToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTempToken", arg0, arg1)
	ret0, _ := ret[0].(*api.TempToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTempToken indicates an expected call of GenerateTempToken
func (mr *MockAuthServiceApiServerMockRecorder) GenerateTempToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTempToken", reflect.TypeOf((*MockAuthServiceApiServer)(nil).GenerateTempToken), arg0, arg1)
}

// ValidateTempToken mocks base method
func (m *MockAuthServiceApiServer) ValidateTempToken(arg0 context.Context, arg1 *api.TempToken) (*api.TempTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTempToken", arg0, arg1)
	ret0, _ := ret[0].(*api.TempTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTempToken indicates an expected call of ValidateTempToken
func (mr *MockAuthServiceApiServerMockRecorder) ValidateTempToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTempToken", reflect.TypeOf((*MockAuthServiceApiServer)(nil).ValidateTempToken), arg0, arg1)
}

// GetTempTokens mocks base method
func (m *MockAuthServiceApiServer) GetTempTokens(arg0 context.Context, arg1 *api.TempTokenInfo) (*api.TempTokenInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempTokens", arg0, arg1)
	ret0, _ := ret[0].(*api.TempTokenInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTempTokens indicates an expected call of GetTempTokens
func (mr *MockAuthServiceApiServerMockRecorder) GetTempTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempTokens", reflect.TypeOf((*MockAuthServiceApiServer)(nil).GetTempTokens), arg0, arg1)
}

// DeleteTempToken mocks base method
func (m *MockAuthServiceApiServer) DeleteTempToken(arg0 context.Context, arg1 *api.TempToken) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTempToken", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTempToken indicates an expected call of DeleteTempToken
func (mr *MockAuthServiceApiServerMockRecorder) DeleteTempToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTempToken", reflect.TypeOf((*MockAuthServiceApiServer)(nil).DeleteTempToken), arg0, arg1)
}

// PurgeUserTempTokens mocks base method
func (m *MockAuthServiceApiServer) PurgeUserTempTokens(arg0 context.Context, arg1 *api.TempTokenInfo) (*api.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeUserTempTokens", arg0, arg1)
	ret0, _ := ret[0].(*api.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeUserTempTokens indicates an expected call of PurgeUserTempTokens
func (mr *MockAuthServiceApiServerMockRecorder) PurgeUserTempTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeUserTempTokens", reflect.TypeOf((*MockAuthServiceApiServer)(nil).PurgeUserTempTokens), arg0, arg1)
}
