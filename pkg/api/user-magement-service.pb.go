// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: api/user-magement-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ServiceStatus_StatusValue int32

const (
	ServiceStatus_NORMAL  ServiceStatus_StatusValue = 0
	ServiceStatus_PROBLEM ServiceStatus_StatusValue = 1
)

// Enum value maps for ServiceStatus_StatusValue.
var (
	ServiceStatus_StatusValue_name = map[int32]string{
		0: "NORMAL",
		1: "PROBLEM",
	}
	ServiceStatus_StatusValue_value = map[string]int32{
		"NORMAL":  0,
		"PROBLEM": 1,
	}
)

func (x ServiceStatus_StatusValue) Enum() *ServiceStatus_StatusValue {
	p := new(ServiceStatus_StatusValue)
	*p = x
	return p
}

func (x ServiceStatus_StatusValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus_StatusValue) Descriptor() protoreflect.EnumDescriptor {
	return file_api_user_magement_service_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus_StatusValue) Type() protoreflect.EnumType {
	return &file_api_user_magement_service_proto_enumTypes[0]
}

func (x ServiceStatus_StatusValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus_StatusValue.Descriptor instead.
func (ServiceStatus_StatusValue) EnumDescriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{0, 0}
}

//
// Status is typically used as a return value indicating if the method was
// performed normally, or the system has any internal error e.g. checking system
// status of a service
type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ServiceStatus_StatusValue `protobuf:"varint,1,opt,name=status,proto3,enum=inf.user_management_api.ServiceStatus_StatusValue" json:"status,omitempty"`
	Msg     string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Version string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceStatus) GetStatus() ServiceStatus_StatusValue {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_NORMAL
}

func (x *ServiceStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ServiceStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type SignupWithEmailMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email             string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password          string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	InstanceId        string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	PreferredLanguage string `protobuf:"bytes,4,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	WantsNewsletter   bool   `protobuf:"varint,5,opt,name=wants_newsletter,json=wantsNewsletter,proto3" json:"wants_newsletter,omitempty"`
}

func (x *SignupWithEmailMsg) Reset() {
	*x = SignupWithEmailMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignupWithEmailMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupWithEmailMsg) ProtoMessage() {}

func (x *SignupWithEmailMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupWithEmailMsg.ProtoReflect.Descriptor instead.
func (*SignupWithEmailMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{1}
}

func (x *SignupWithEmailMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignupWithEmailMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SignupWithEmailMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SignupWithEmailMsg) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *SignupWithEmailMsg) GetWantsNewsletter() bool {
	if x != nil {
		return x.WantsNewsletter
	}
	return false
}

type LoginWithEmailMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email         string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	InstanceId    string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	AsParticipant bool   `protobuf:"varint,4,opt,name=as_participant,json=asParticipant,proto3" json:"as_participant,omitempty"`
}

func (x *LoginWithEmailMsg) Reset() {
	*x = LoginWithEmailMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWithEmailMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWithEmailMsg) ProtoMessage() {}

func (x *LoginWithEmailMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWithEmailMsg.ProtoReflect.Descriptor instead.
func (*LoginWithEmailMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoginWithEmailMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginWithEmailMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginWithEmailMsg) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LoginWithEmailMsg) GetAsParticipant() bool {
	if x != nil {
		return x.AsParticipant
	}
	return false
}

type UserReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId     string      `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string      `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *UserReference) Reset() {
	*x = UserReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReference) ProtoMessage() {}

func (x *UserReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReference.ProtoReflect.Descriptor instead.
func (*UserReference) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{3}
}

func (x *UserReference) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UserReference) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserReference) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId   string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{4}
}

func (x *RefreshTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RefreshTokenRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type AppTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AppTokenRequest) Reset() {
	*x = AppTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTokenRequest) ProtoMessage() {}

func (x *AppTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTokenRequest.ProtoReflect.Descriptor instead.
func (*AppTokenRequest) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{5}
}

func (x *AppTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AppTokenValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []string `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *AppTokenValidation) Reset() {
	*x = AppTokenValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTokenValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTokenValidation) ProtoMessage() {}

func (x *AppTokenValidation) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTokenValidation.ProtoReflect.Descriptor instead.
func (*AppTokenValidation) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{6}
}

func (x *AppTokenValidation) GetInstances() []string {
	if x != nil {
		return x.Instances
	}
	return nil
}

type SwitchProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ProfileId    string      `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	RefreshToken string      `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *SwitchProfileRequest) Reset() {
	*x = SwitchProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchProfileRequest) ProtoMessage() {}

func (x *SwitchProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchProfileRequest.ProtoReflect.Descriptor instead.
func (*SwitchProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{7}
}

func (x *SwitchProfileRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SwitchProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *SwitchProfileRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Profile *Profile    `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{8}
}

func (x *ProfileRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ProfileRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UserAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Roles             []string   `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	InstanceId        string     `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	AccountId         string     `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // e.g. email address
	Profiles          []*Profile `protobuf:"bytes,5,rep,name=profiles,proto3" json:"profiles,omitempty"`
	SelectedProfile   *Profile   `protobuf:"bytes,6,opt,name=selected_profile,json=selectedProfile,proto3" json:"selected_profile,omitempty"`
	AccountConfirmed  bool       `protobuf:"varint,7,opt,name=account_confirmed,json=accountConfirmed,proto3" json:"account_confirmed,omitempty"`
	PreferredLanguage string     `protobuf:"bytes,8,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
}

func (x *UserAuthInfo) Reset() {
	*x = UserAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfo) ProtoMessage() {}

func (x *UserAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfo.ProtoReflect.Descriptor instead.
func (*UserAuthInfo) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{9}
}

func (x *UserAuthInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAuthInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UserAuthInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UserAuthInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserAuthInfo) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *UserAuthInfo) GetSelectedProfile() *Profile {
	if x != nil {
		return x.SelectedProfile
	}
	return nil
}

func (x *UserAuthInfo) GetAccountConfirmed() bool {
	if x != nil {
		return x.AccountConfirmed
	}
	return false
}

func (x *UserAuthInfo) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

type PasswordChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OldPassword string      `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword string      `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *PasswordChangeMsg) Reset() {
	*x = PasswordChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeMsg) ProtoMessage() {}

func (x *PasswordChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeMsg.ProtoReflect.Descriptor instead.
func (*PasswordChangeMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{10}
}

func (x *PasswordChangeMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PasswordChangeMsg) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *PasswordChangeMsg) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type EmailChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	NewEmail     string      `protobuf:"bytes,2,opt,name=new_email,json=newEmail,proto3" json:"new_email,omitempty"`
	KeepOldEmail bool        `protobuf:"varint,3,opt,name=keep_old_email,json=keepOldEmail,proto3" json:"keep_old_email,omitempty"`
}

func (x *EmailChangeMsg) Reset() {
	*x = EmailChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailChangeMsg) ProtoMessage() {}

func (x *EmailChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailChangeMsg.ProtoReflect.Descriptor instead.
func (*EmailChangeMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{11}
}

func (x *EmailChangeMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EmailChangeMsg) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

func (x *EmailChangeMsg) GetKeepOldEmail() bool {
	if x != nil {
		return x.KeepOldEmail
	}
	return false
}

type LanguageChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	LanguageCode string      `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *LanguageChangeMsg) Reset() {
	*x = LanguageChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageChangeMsg) ProtoMessage() {}

func (x *LanguageChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageChangeMsg.ProtoReflect.Descriptor instead.
func (*LanguageChangeMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{12}
}

func (x *LanguageChangeMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LanguageChangeMsg) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type ContactPreferencesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              *TokenInfos         `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ContactPreferences *ContactPreferences `protobuf:"bytes,2,opt,name=contact_preferences,json=contactPreferences,proto3" json:"contact_preferences,omitempty"`
}

func (x *ContactPreferencesMsg) Reset() {
	*x = ContactPreferencesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPreferencesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPreferencesMsg) ProtoMessage() {}

func (x *ContactPreferencesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPreferencesMsg.ProtoReflect.Descriptor instead.
func (*ContactPreferencesMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{13}
}

func (x *ContactPreferencesMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ContactPreferencesMsg) GetContactPreferences() *ContactPreferences {
	if x != nil {
		return x.ContactPreferences
	}
	return nil
}

type ContactInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       *TokenInfos  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ContactInfo *ContactInfo `protobuf:"bytes,2,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
}

func (x *ContactInfoMsg) Reset() {
	*x = ContactInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfoMsg) ProtoMessage() {}

func (x *ContactInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfoMsg.ProtoReflect.Descriptor instead.
func (*ContactInfoMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{14}
}

func (x *ContactInfoMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ContactInfoMsg) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

type JWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *JWTRequest) Reset() {
	*x = JWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTRequest) ProtoMessage() {}

func (x *JWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTRequest.ProtoReflect.Descriptor instead.
func (*JWTRequest) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{15}
}

func (x *JWTRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RefreshJWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *RefreshJWTRequest) Reset() {
	*x = RefreshJWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshJWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshJWTRequest) ProtoMessage() {}

func (x *RefreshJWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshJWTRequest.ProtoReflect.Descriptor instead.
func (*RefreshJWTRequest) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{16}
}

func (x *RefreshJWTRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshJWTRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type CreateUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token             *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AccountId         string      `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	InitialPassword   string      `protobuf:"bytes,3,opt,name=initial_password,json=initialPassword,proto3" json:"initial_password,omitempty"`
	PreferredLanguage string      `protobuf:"bytes,4,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	Roles             []string    `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *CreateUserReq) Reset() {
	*x = CreateUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserReq) ProtoMessage() {}

func (x *CreateUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserReq.ProtoReflect.Descriptor instead.
func (*CreateUserReq) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{17}
}

func (x *CreateUserReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CreateUserReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateUserReq) GetInitialPassword() string {
	if x != nil {
		return x.InitialPassword
	}
	return ""
}

func (x *CreateUserReq) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *CreateUserReq) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type RoleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AccountId string      `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Role      string      `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RoleMsg) Reset() {
	*x = RoleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMsg) ProtoMessage() {}

func (x *RoleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMsg.ProtoReflect.Descriptor instead.
func (*RoleMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{18}
}

func (x *RoleMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *RoleMsg) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RoleMsg) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type FindNonParticipantUsersMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *FindNonParticipantUsersMsg) Reset() {
	*x = FindNonParticipantUsersMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNonParticipantUsersMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNonParticipantUsersMsg) ProtoMessage() {}

func (x *FindNonParticipantUsersMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNonParticipantUsersMsg.ProtoReflect.Descriptor instead.
func (*FindNonParticipantUsersMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{19}
}

func (x *FindNonParticipantUsersMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

type UserListMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserListMsg) Reset() {
	*x = UserListMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_user_magement_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserListMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListMsg) ProtoMessage() {}

func (x *UserListMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_user_magement_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListMsg.ProtoReflect.Descriptor instead.
func (*UserListMsg) Descriptor() ([]byte, []int) {
	return file_api_user_magement_service_proto_rawDescGZIP(), []int{20}
}

func (x *UserListMsg) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_api_user_magement_service_proto protoreflect.FileDescriptor

var file_api_user_magement_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x12,
	0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x77, 0x61, 0x6e, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x22,
	0x8d, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22,
	0x77, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x27,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x32, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x14,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a,
	0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x6c, 0x64,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65,
	0x65, 0x70, 0x4f, 0x6c, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x66, 0x0a, 0x11, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x0a, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2c,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x4a, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x33, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x32, 0xc2, 0x11, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x12, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x57, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x19,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x1a,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x57, 0x54, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a,
	0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x51, 0x0a, 0x08, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4a, 0x57, 0x54, 0x12, 0x2a, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4a,
	0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x15, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x19,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x19,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x41, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x73, 0x67, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x17,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4d, 0x73,
	0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x0e,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x1a,
	0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x74, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x1a,
	0x24, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_user_magement_service_proto_rawDescOnce sync.Once
	file_api_user_magement_service_proto_rawDescData = file_api_user_magement_service_proto_rawDesc
)

func file_api_user_magement_service_proto_rawDescGZIP() []byte {
	file_api_user_magement_service_proto_rawDescOnce.Do(func() {
		file_api_user_magement_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_user_magement_service_proto_rawDescData)
	})
	return file_api_user_magement_service_proto_rawDescData
}

var file_api_user_magement_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_user_magement_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_user_magement_service_proto_goTypes = []interface{}{
	(ServiceStatus_StatusValue)(0),     // 0: inf.user_management_api.ServiceStatus.StatusValue
	(*ServiceStatus)(nil),              // 1: inf.user_management_api.ServiceStatus
	(*SignupWithEmailMsg)(nil),         // 2: inf.user_management_api.SignupWithEmailMsg
	(*LoginWithEmailMsg)(nil),          // 3: inf.user_management_api.LoginWithEmailMsg
	(*UserReference)(nil),              // 4: inf.user_management_api.UserReference
	(*RefreshTokenRequest)(nil),        // 5: inf.user_management_api.RefreshTokenRequest
	(*AppTokenRequest)(nil),            // 6: inf.user_management_api.AppTokenRequest
	(*AppTokenValidation)(nil),         // 7: inf.user_management_api.AppTokenValidation
	(*SwitchProfileRequest)(nil),       // 8: inf.user_management_api.SwitchProfileRequest
	(*ProfileRequest)(nil),             // 9: inf.user_management_api.ProfileRequest
	(*UserAuthInfo)(nil),               // 10: inf.user_management_api.UserAuthInfo
	(*PasswordChangeMsg)(nil),          // 11: inf.user_management_api.PasswordChangeMsg
	(*EmailChangeMsg)(nil),             // 12: inf.user_management_api.EmailChangeMsg
	(*LanguageChangeMsg)(nil),          // 13: inf.user_management_api.LanguageChangeMsg
	(*ContactPreferencesMsg)(nil),      // 14: inf.user_management_api.ContactPreferencesMsg
	(*ContactInfoMsg)(nil),             // 15: inf.user_management_api.ContactInfoMsg
	(*JWTRequest)(nil),                 // 16: inf.user_management_api.JWTRequest
	(*RefreshJWTRequest)(nil),          // 17: inf.user_management_api.RefreshJWTRequest
	(*CreateUserReq)(nil),              // 18: inf.user_management_api.CreateUserReq
	(*RoleMsg)(nil),                    // 19: inf.user_management_api.RoleMsg
	(*FindNonParticipantUsersMsg)(nil), // 20: inf.user_management_api.FindNonParticipantUsersMsg
	(*UserListMsg)(nil),                // 21: inf.user_management_api.UserListMsg
	(*TokenInfos)(nil),                 // 22: inf.tokens.TokenInfos
	(*Profile)(nil),                    // 23: inf.user.Profile
	(*ContactPreferences)(nil),         // 24: inf.user.ContactPreferences
	(*ContactInfo)(nil),                // 25: inf.user.ContactInfo
	(*User)(nil),                       // 26: inf.user.User
	(*empty.Empty)(nil),                // 27: google.protobuf.Empty
	(*TempTokenInfo)(nil),              // 28: inf.tokens.TempTokenInfo
	(*TempToken)(nil),                  // 29: inf.tokens.TempToken
	(*TokenResponse)(nil),              // 30: inf.tokens.TokenResponse
	(*TempTokenInfos)(nil),             // 31: inf.tokens.TempTokenInfos
}
var file_api_user_magement_service_proto_depIdxs = []int32{
	0,  // 0: inf.user_management_api.ServiceStatus.status:type_name -> inf.user_management_api.ServiceStatus.StatusValue
	22, // 1: inf.user_management_api.UserReference.token:type_name -> inf.tokens.TokenInfos
	22, // 2: inf.user_management_api.SwitchProfileRequest.token:type_name -> inf.tokens.TokenInfos
	22, // 3: inf.user_management_api.ProfileRequest.token:type_name -> inf.tokens.TokenInfos
	23, // 4: inf.user_management_api.ProfileRequest.profile:type_name -> inf.user.Profile
	23, // 5: inf.user_management_api.UserAuthInfo.profiles:type_name -> inf.user.Profile
	23, // 6: inf.user_management_api.UserAuthInfo.selected_profile:type_name -> inf.user.Profile
	22, // 7: inf.user_management_api.PasswordChangeMsg.token:type_name -> inf.tokens.TokenInfos
	22, // 8: inf.user_management_api.EmailChangeMsg.token:type_name -> inf.tokens.TokenInfos
	22, // 9: inf.user_management_api.LanguageChangeMsg.token:type_name -> inf.tokens.TokenInfos
	22, // 10: inf.user_management_api.ContactPreferencesMsg.token:type_name -> inf.tokens.TokenInfos
	24, // 11: inf.user_management_api.ContactPreferencesMsg.contact_preferences:type_name -> inf.user.ContactPreferences
	22, // 12: inf.user_management_api.ContactInfoMsg.token:type_name -> inf.tokens.TokenInfos
	25, // 13: inf.user_management_api.ContactInfoMsg.contact_info:type_name -> inf.user.ContactInfo
	22, // 14: inf.user_management_api.CreateUserReq.token:type_name -> inf.tokens.TokenInfos
	22, // 15: inf.user_management_api.RoleMsg.token:type_name -> inf.tokens.TokenInfos
	22, // 16: inf.user_management_api.FindNonParticipantUsersMsg.token:type_name -> inf.tokens.TokenInfos
	26, // 17: inf.user_management_api.UserListMsg.users:type_name -> inf.user.User
	27, // 18: inf.user_management_api.UserManagementApi.Status:input_type -> google.protobuf.Empty
	3,  // 19: inf.user_management_api.UserManagementApi.LoginWithEmail:input_type -> inf.user_management_api.LoginWithEmailMsg
	16, // 20: inf.user_management_api.UserManagementApi.LoginWithTempToken:input_type -> inf.user_management_api.JWTRequest
	2,  // 21: inf.user_management_api.UserManagementApi.SignupWithEmail:input_type -> inf.user_management_api.SignupWithEmailMsg
	8,  // 22: inf.user_management_api.UserManagementApi.SwitchProfile:input_type -> inf.user_management_api.SwitchProfileRequest
	16, // 23: inf.user_management_api.UserManagementApi.ValidateJWT:input_type -> inf.user_management_api.JWTRequest
	17, // 24: inf.user_management_api.UserManagementApi.RenewJWT:input_type -> inf.user_management_api.RefreshJWTRequest
	6,  // 25: inf.user_management_api.UserManagementApi.ValidateAppToken:input_type -> inf.user_management_api.AppTokenRequest
	28, // 26: inf.user_management_api.UserManagementApi.GenerateTempToken:input_type -> inf.tokens.TempTokenInfo
	29, // 27: inf.user_management_api.UserManagementApi.ValidateTempToken:input_type -> inf.tokens.TempToken
	28, // 28: inf.user_management_api.UserManagementApi.GetTempTokens:input_type -> inf.tokens.TempTokenInfo
	29, // 29: inf.user_management_api.UserManagementApi.DeleteTempToken:input_type -> inf.tokens.TempToken
	28, // 30: inf.user_management_api.UserManagementApi.PurgeUserTempTokens:input_type -> inf.tokens.TempTokenInfo
	4,  // 31: inf.user_management_api.UserManagementApi.GetUser:input_type -> inf.user_management_api.UserReference
	11, // 32: inf.user_management_api.UserManagementApi.ChangePassword:input_type -> inf.user_management_api.PasswordChangeMsg
	12, // 33: inf.user_management_api.UserManagementApi.ChangeAccountIDEmail:input_type -> inf.user_management_api.EmailChangeMsg
	4,  // 34: inf.user_management_api.UserManagementApi.DeleteAccount:input_type -> inf.user_management_api.UserReference
	13, // 35: inf.user_management_api.UserManagementApi.ChangePreferredLanguage:input_type -> inf.user_management_api.LanguageChangeMsg
	9,  // 36: inf.user_management_api.UserManagementApi.SaveProfile:input_type -> inf.user_management_api.ProfileRequest
	9,  // 37: inf.user_management_api.UserManagementApi.RemoveProfile:input_type -> inf.user_management_api.ProfileRequest
	14, // 38: inf.user_management_api.UserManagementApi.UpdateContactPreferences:input_type -> inf.user_management_api.ContactPreferencesMsg
	15, // 39: inf.user_management_api.UserManagementApi.AddEmail:input_type -> inf.user_management_api.ContactInfoMsg
	15, // 40: inf.user_management_api.UserManagementApi.RemoveEmail:input_type -> inf.user_management_api.ContactInfoMsg
	18, // 41: inf.user_management_api.UserManagementApi.CreateUser:input_type -> inf.user_management_api.CreateUserReq
	19, // 42: inf.user_management_api.UserManagementApi.AddRoleForUser:input_type -> inf.user_management_api.RoleMsg
	19, // 43: inf.user_management_api.UserManagementApi.RemoveRoleForUser:input_type -> inf.user_management_api.RoleMsg
	20, // 44: inf.user_management_api.UserManagementApi.FindNonParticipantUsers:input_type -> inf.user_management_api.FindNonParticipantUsersMsg
	1,  // 45: inf.user_management_api.UserManagementApi.Status:output_type -> inf.user_management_api.ServiceStatus
	30, // 46: inf.user_management_api.UserManagementApi.LoginWithEmail:output_type -> inf.tokens.TokenResponse
	30, // 47: inf.user_management_api.UserManagementApi.LoginWithTempToken:output_type -> inf.tokens.TokenResponse
	30, // 48: inf.user_management_api.UserManagementApi.SignupWithEmail:output_type -> inf.tokens.TokenResponse
	30, // 49: inf.user_management_api.UserManagementApi.SwitchProfile:output_type -> inf.tokens.TokenResponse
	22, // 50: inf.user_management_api.UserManagementApi.ValidateJWT:output_type -> inf.tokens.TokenInfos
	30, // 51: inf.user_management_api.UserManagementApi.RenewJWT:output_type -> inf.tokens.TokenResponse
	7,  // 52: inf.user_management_api.UserManagementApi.ValidateAppToken:output_type -> inf.user_management_api.AppTokenValidation
	29, // 53: inf.user_management_api.UserManagementApi.GenerateTempToken:output_type -> inf.tokens.TempToken
	28, // 54: inf.user_management_api.UserManagementApi.ValidateTempToken:output_type -> inf.tokens.TempTokenInfo
	31, // 55: inf.user_management_api.UserManagementApi.GetTempTokens:output_type -> inf.tokens.TempTokenInfos
	1,  // 56: inf.user_management_api.UserManagementApi.DeleteTempToken:output_type -> inf.user_management_api.ServiceStatus
	1,  // 57: inf.user_management_api.UserManagementApi.PurgeUserTempTokens:output_type -> inf.user_management_api.ServiceStatus
	26, // 58: inf.user_management_api.UserManagementApi.GetUser:output_type -> inf.user.User
	1,  // 59: inf.user_management_api.UserManagementApi.ChangePassword:output_type -> inf.user_management_api.ServiceStatus
	26, // 60: inf.user_management_api.UserManagementApi.ChangeAccountIDEmail:output_type -> inf.user.User
	1,  // 61: inf.user_management_api.UserManagementApi.DeleteAccount:output_type -> inf.user_management_api.ServiceStatus
	26, // 62: inf.user_management_api.UserManagementApi.ChangePreferredLanguage:output_type -> inf.user.User
	26, // 63: inf.user_management_api.UserManagementApi.SaveProfile:output_type -> inf.user.User
	26, // 64: inf.user_management_api.UserManagementApi.RemoveProfile:output_type -> inf.user.User
	26, // 65: inf.user_management_api.UserManagementApi.UpdateContactPreferences:output_type -> inf.user.User
	26, // 66: inf.user_management_api.UserManagementApi.AddEmail:output_type -> inf.user.User
	26, // 67: inf.user_management_api.UserManagementApi.RemoveEmail:output_type -> inf.user.User
	26, // 68: inf.user_management_api.UserManagementApi.CreateUser:output_type -> inf.user.User
	26, // 69: inf.user_management_api.UserManagementApi.AddRoleForUser:output_type -> inf.user.User
	26, // 70: inf.user_management_api.UserManagementApi.RemoveRoleForUser:output_type -> inf.user.User
	21, // 71: inf.user_management_api.UserManagementApi.FindNonParticipantUsers:output_type -> inf.user_management_api.UserListMsg
	45, // [45:72] is the sub-list for method output_type
	18, // [18:45] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_user_magement_service_proto_init() }
func file_api_user_magement_service_proto_init() {
	if File_api_user_magement_service_proto != nil {
		return
	}
	file_api_user_proto_init()
	file_api_tokens_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_user_magement_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignupWithEmailMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWithEmailMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTokenValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPreferencesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshJWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNonParticipantUsersMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_user_magement_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserListMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_user_magement_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_user_magement_service_proto_goTypes,
		DependencyIndexes: file_api_user_magement_service_proto_depIdxs,
		EnumInfos:         file_api_user_magement_service_proto_enumTypes,
		MessageInfos:      file_api_user_magement_service_proto_msgTypes,
	}.Build()
	File_api_user_magement_service_proto = out.File
	file_api_user_magement_service_proto_rawDesc = nil
	file_api_user_magement_service_proto_goTypes = nil
	file_api_user_magement_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserManagementApiClient is the client API for UserManagementApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserManagementApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceStatus, error)
	// Auth and Token handling:
	LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	LoginWithTempToken(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error)
	SwitchProfile(ctx context.Context, in *SwitchProfileRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenInfos, error)
	RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GenerateTempToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error)
	ValidateTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error)
	GetTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error)
	DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*ServiceStatus, error)
	PurgeUserTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*ServiceStatus, error)
	// User properties:
	GetUser(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*User, error)
	// Account methods:
	ChangePassword(ctx context.Context, in *PasswordChangeMsg, opts ...grpc.CallOption) (*ServiceStatus, error)
	ChangeAccountIDEmail(ctx context.Context, in *EmailChangeMsg, opts ...grpc.CallOption) (*User, error)
	DeleteAccount(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*ServiceStatus, error)
	ChangePreferredLanguage(ctx context.Context, in *LanguageChangeMsg, opts ...grpc.CallOption) (*User, error)
	// Profile methods:
	SaveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error)
	RemoveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error)
	// Contacts:
	UpdateContactPreferences(ctx context.Context, in *ContactPreferencesMsg, opts ...grpc.CallOption) (*User, error)
	AddEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error)
	RemoveEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error)
	// Management Methods:
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error)
	AddRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error)
	RemoveRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error)
	FindNonParticipantUsers(ctx context.Context, in *FindNonParticipantUsersMsg, opts ...grpc.CallOption) (*UserListMsg, error)
}

type userManagementApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementApiClient(cc grpc.ClientConnInterface) UserManagementApiClient {
	return &userManagementApiClient{cc}
}

func (c *userManagementApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) LoginWithEmail(ctx context.Context, in *LoginWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/LoginWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) LoginWithTempToken(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/LoginWithTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SignupWithEmail(ctx context.Context, in *SignupWithEmailMsg, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/SignupWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SwitchProfile(ctx context.Context, in *SwitchProfileRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/SwitchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ValidateJWT(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*TokenInfos, error) {
	out := new(TokenInfos)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/ValidateJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RenewJWT(ctx context.Context, in *RefreshJWTRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ValidateAppToken(ctx context.Context, in *AppTokenRequest, opts ...grpc.CallOption) (*AppTokenValidation, error) {
	out := new(AppTokenValidation)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/ValidateAppToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GenerateTempToken(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempToken, error) {
	out := new(TempToken)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/GenerateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ValidateTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*TempTokenInfo, error) {
	out := new(TempTokenInfo)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/ValidateTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GetTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*TempTokenInfos, error) {
	out := new(TempTokenInfos)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/GetTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) DeleteTempToken(ctx context.Context, in *TempToken, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/DeleteTempToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) PurgeUserTempTokens(ctx context.Context, in *TempTokenInfo, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/PurgeUserTempTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) GetUser(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangePassword(ctx context.Context, in *PasswordChangeMsg, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangeAccountIDEmail(ctx context.Context, in *EmailChangeMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/ChangeAccountIDEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) DeleteAccount(ctx context.Context, in *UserReference, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) ChangePreferredLanguage(ctx context.Context, in *LanguageChangeMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/ChangePreferredLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) SaveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/SaveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RemoveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/RemoveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) UpdateContactPreferences(ctx context.Context, in *ContactPreferencesMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/UpdateContactPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) AddEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/AddEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RemoveEmail(ctx context.Context, in *ContactInfoMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/RemoveEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) AddRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/AddRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) RemoveRoleForUser(ctx context.Context, in *RoleMsg, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/RemoveRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementApiClient) FindNonParticipantUsers(ctx context.Context, in *FindNonParticipantUsersMsg, opts ...grpc.CallOption) (*UserListMsg, error) {
	out := new(UserListMsg)
	err := c.cc.Invoke(ctx, "/inf.user_management_api.UserManagementApi/FindNonParticipantUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementApiServer is the server API for UserManagementApi service.
type UserManagementApiServer interface {
	Status(context.Context, *empty.Empty) (*ServiceStatus, error)
	// Auth and Token handling:
	LoginWithEmail(context.Context, *LoginWithEmailMsg) (*TokenResponse, error)
	LoginWithTempToken(context.Context, *JWTRequest) (*TokenResponse, error)
	SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error)
	SwitchProfile(context.Context, *SwitchProfileRequest) (*TokenResponse, error)
	ValidateJWT(context.Context, *JWTRequest) (*TokenInfos, error)
	RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error)
	ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error)
	// Temporary Tokens handling:
	GenerateTempToken(context.Context, *TempTokenInfo) (*TempToken, error)
	ValidateTempToken(context.Context, *TempToken) (*TempTokenInfo, error)
	GetTempTokens(context.Context, *TempTokenInfo) (*TempTokenInfos, error)
	DeleteTempToken(context.Context, *TempToken) (*ServiceStatus, error)
	PurgeUserTempTokens(context.Context, *TempTokenInfo) (*ServiceStatus, error)
	// User properties:
	GetUser(context.Context, *UserReference) (*User, error)
	// Account methods:
	ChangePassword(context.Context, *PasswordChangeMsg) (*ServiceStatus, error)
	ChangeAccountIDEmail(context.Context, *EmailChangeMsg) (*User, error)
	DeleteAccount(context.Context, *UserReference) (*ServiceStatus, error)
	ChangePreferredLanguage(context.Context, *LanguageChangeMsg) (*User, error)
	// Profile methods:
	SaveProfile(context.Context, *ProfileRequest) (*User, error)
	RemoveProfile(context.Context, *ProfileRequest) (*User, error)
	// Contacts:
	UpdateContactPreferences(context.Context, *ContactPreferencesMsg) (*User, error)
	AddEmail(context.Context, *ContactInfoMsg) (*User, error)
	RemoveEmail(context.Context, *ContactInfoMsg) (*User, error)
	// Management Methods:
	CreateUser(context.Context, *CreateUserReq) (*User, error)
	AddRoleForUser(context.Context, *RoleMsg) (*User, error)
	RemoveRoleForUser(context.Context, *RoleMsg) (*User, error)
	FindNonParticipantUsers(context.Context, *FindNonParticipantUsersMsg) (*UserListMsg, error)
}

// UnimplementedUserManagementApiServer can be embedded to have forward compatible implementations.
type UnimplementedUserManagementApiServer struct {
}

func (*UnimplementedUserManagementApiServer) Status(context.Context, *empty.Empty) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedUserManagementApiServer) LoginWithEmail(context.Context, *LoginWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithEmail not implemented")
}
func (*UnimplementedUserManagementApiServer) LoginWithTempToken(context.Context, *JWTRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithTempToken not implemented")
}
func (*UnimplementedUserManagementApiServer) SignupWithEmail(context.Context, *SignupWithEmailMsg) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupWithEmail not implemented")
}
func (*UnimplementedUserManagementApiServer) SwitchProfile(context.Context, *SwitchProfileRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchProfile not implemented")
}
func (*UnimplementedUserManagementApiServer) ValidateJWT(context.Context, *JWTRequest) (*TokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateJWT not implemented")
}
func (*UnimplementedUserManagementApiServer) RenewJWT(context.Context, *RefreshJWTRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewJWT not implemented")
}
func (*UnimplementedUserManagementApiServer) ValidateAppToken(context.Context, *AppTokenRequest) (*AppTokenValidation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAppToken not implemented")
}
func (*UnimplementedUserManagementApiServer) GenerateTempToken(context.Context, *TempTokenInfo) (*TempToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTempToken not implemented")
}
func (*UnimplementedUserManagementApiServer) ValidateTempToken(context.Context, *TempToken) (*TempTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTempToken not implemented")
}
func (*UnimplementedUserManagementApiServer) GetTempTokens(context.Context, *TempTokenInfo) (*TempTokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempTokens not implemented")
}
func (*UnimplementedUserManagementApiServer) DeleteTempToken(context.Context, *TempToken) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTempToken not implemented")
}
func (*UnimplementedUserManagementApiServer) PurgeUserTempTokens(context.Context, *TempTokenInfo) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserTempTokens not implemented")
}
func (*UnimplementedUserManagementApiServer) GetUser(context.Context, *UserReference) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserManagementApiServer) ChangePassword(context.Context, *PasswordChangeMsg) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedUserManagementApiServer) ChangeAccountIDEmail(context.Context, *EmailChangeMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountIDEmail not implemented")
}
func (*UnimplementedUserManagementApiServer) DeleteAccount(context.Context, *UserReference) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedUserManagementApiServer) ChangePreferredLanguage(context.Context, *LanguageChangeMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePreferredLanguage not implemented")
}
func (*UnimplementedUserManagementApiServer) SaveProfile(context.Context, *ProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProfile not implemented")
}
func (*UnimplementedUserManagementApiServer) RemoveProfile(context.Context, *ProfileRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProfile not implemented")
}
func (*UnimplementedUserManagementApiServer) UpdateContactPreferences(context.Context, *ContactPreferencesMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactPreferences not implemented")
}
func (*UnimplementedUserManagementApiServer) AddEmail(context.Context, *ContactInfoMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmail not implemented")
}
func (*UnimplementedUserManagementApiServer) RemoveEmail(context.Context, *ContactInfoMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmail not implemented")
}
func (*UnimplementedUserManagementApiServer) CreateUser(context.Context, *CreateUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserManagementApiServer) AddRoleForUser(context.Context, *RoleMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (*UnimplementedUserManagementApiServer) RemoveRoleForUser(context.Context, *RoleMsg) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleForUser not implemented")
}
func (*UnimplementedUserManagementApiServer) FindNonParticipantUsers(context.Context, *FindNonParticipantUsersMsg) (*UserListMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNonParticipantUsers not implemented")
}

func RegisterUserManagementApiServer(s *grpc.Server, srv UserManagementApiServer) {
	s.RegisterService(&_UserManagementApi_serviceDesc, srv)
}

func _UserManagementApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/LoginWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).LoginWithEmail(ctx, req.(*LoginWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_LoginWithTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).LoginWithTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/LoginWithTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).LoginWithTempToken(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SignupWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupWithEmailMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SignupWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/SignupWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SignupWithEmail(ctx, req.(*SignupWithEmailMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SwitchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SwitchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/SwitchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SwitchProfile(ctx, req.(*SwitchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ValidateJWT(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RenewJWT(ctx, req.(*RefreshJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ValidateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ValidateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/ValidateAppToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ValidateAppToken(ctx, req.(*AppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GenerateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GenerateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/GenerateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GenerateTempToken(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ValidateTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ValidateTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/ValidateTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ValidateTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GetTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GetTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/GetTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GetTempTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_DeleteTempToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).DeleteTempToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/DeleteTempToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).DeleteTempToken(ctx, req.(*TempToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_PurgeUserTempTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).PurgeUserTempTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/PurgeUserTempTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).PurgeUserTempTokens(ctx, req.(*TempTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).GetUser(ctx, req.(*UserReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangePassword(ctx, req.(*PasswordChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangeAccountIDEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangeAccountIDEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/ChangeAccountIDEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangeAccountIDEmail(ctx, req.(*EmailChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).DeleteAccount(ctx, req.(*UserReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_ChangePreferredLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).ChangePreferredLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/ChangePreferredLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).ChangePreferredLanguage(ctx, req.(*LanguageChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_SaveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).SaveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/SaveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).SaveProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RemoveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RemoveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/RemoveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RemoveProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_UpdateContactPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactPreferencesMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).UpdateContactPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/UpdateContactPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).UpdateContactPreferences(ctx, req.(*ContactPreferencesMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_AddEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).AddEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/AddEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).AddEmail(ctx, req.(*ContactInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RemoveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactInfoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RemoveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/RemoveEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RemoveEmail(ctx, req.(*ContactInfoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/AddRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).AddRoleForUser(ctx, req.(*RoleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_RemoveRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).RemoveRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/RemoveRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).RemoveRoleForUser(ctx, req.(*RoleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementApi_FindNonParticipantUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNonParticipantUsersMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementApiServer).FindNonParticipantUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.user_management_api.UserManagementApi/FindNonParticipantUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementApiServer).FindNonParticipantUsers(ctx, req.(*FindNonParticipantUsersMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManagementApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inf.user_management_api.UserManagementApi",
	HandlerType: (*UserManagementApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _UserManagementApi_Status_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _UserManagementApi_LoginWithEmail_Handler,
		},
		{
			MethodName: "LoginWithTempToken",
			Handler:    _UserManagementApi_LoginWithTempToken_Handler,
		},
		{
			MethodName: "SignupWithEmail",
			Handler:    _UserManagementApi_SignupWithEmail_Handler,
		},
		{
			MethodName: "SwitchProfile",
			Handler:    _UserManagementApi_SwitchProfile_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _UserManagementApi_ValidateJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _UserManagementApi_RenewJWT_Handler,
		},
		{
			MethodName: "ValidateAppToken",
			Handler:    _UserManagementApi_ValidateAppToken_Handler,
		},
		{
			MethodName: "GenerateTempToken",
			Handler:    _UserManagementApi_GenerateTempToken_Handler,
		},
		{
			MethodName: "ValidateTempToken",
			Handler:    _UserManagementApi_ValidateTempToken_Handler,
		},
		{
			MethodName: "GetTempTokens",
			Handler:    _UserManagementApi_GetTempTokens_Handler,
		},
		{
			MethodName: "DeleteTempToken",
			Handler:    _UserManagementApi_DeleteTempToken_Handler,
		},
		{
			MethodName: "PurgeUserTempTokens",
			Handler:    _UserManagementApi_PurgeUserTempTokens_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserManagementApi_GetUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserManagementApi_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeAccountIDEmail",
			Handler:    _UserManagementApi_ChangeAccountIDEmail_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _UserManagementApi_DeleteAccount_Handler,
		},
		{
			MethodName: "ChangePreferredLanguage",
			Handler:    _UserManagementApi_ChangePreferredLanguage_Handler,
		},
		{
			MethodName: "SaveProfile",
			Handler:    _UserManagementApi_SaveProfile_Handler,
		},
		{
			MethodName: "RemoveProfile",
			Handler:    _UserManagementApi_RemoveProfile_Handler,
		},
		{
			MethodName: "UpdateContactPreferences",
			Handler:    _UserManagementApi_UpdateContactPreferences_Handler,
		},
		{
			MethodName: "AddEmail",
			Handler:    _UserManagementApi_AddEmail_Handler,
		},
		{
			MethodName: "RemoveEmail",
			Handler:    _UserManagementApi_RemoveEmail_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserManagementApi_CreateUser_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _UserManagementApi_AddRoleForUser_Handler,
		},
		{
			MethodName: "RemoveRoleForUser",
			Handler:    _UserManagementApi_RemoveRoleForUser_Handler,
		},
		{
			MethodName: "FindNonParticipantUsers",
			Handler:    _UserManagementApi_FindNonParticipantUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user-magement-service.proto",
}
