// Code generated by MockGen. DO NOT EDIT.
// Source: ../messaging-service/pkg/api/messaging_service/message-service.pb.go

// Package mock_messaging_service is a generated GoMock package.
package mock_messaging_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	messaging_service "github.com/influenzanet/messaging-service/pkg/api/messaging_service"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMessagingServiceApiClient is a mock of MessagingServiceApiClient interface
type MockMessagingServiceApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceApiClientMockRecorder
}

// MockMessagingServiceApiClientMockRecorder is the mock recorder for MockMessagingServiceApiClient
type MockMessagingServiceApiClientMockRecorder struct {
	mock *MockMessagingServiceApiClient
}

// NewMockMessagingServiceApiClient creates a new mock instance
func NewMockMessagingServiceApiClient(ctrl *gomock.Controller) *MockMessagingServiceApiClient {
	mock := &MockMessagingServiceApiClient{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagingServiceApiClient) EXPECT() *MockMessagingServiceApiClientMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockMessagingServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockMessagingServiceApiClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).Status), varargs...)
}

// SendInstantEmail mocks base method
func (m *MockMessagingServiceApiClient) SendInstantEmail(ctx context.Context, in *messaging_service.SendEmailReq, opts ...grpc.CallOption) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendInstantEmail", varargs...)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInstantEmail indicates an expected call of SendInstantEmail
func (mr *MockMessagingServiceApiClientMockRecorder) SendInstantEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstantEmail", reflect.TypeOf((*MockMessagingServiceApiClient)(nil).SendInstantEmail), varargs...)
}

// MockMessagingServiceApiServer is a mock of MessagingServiceApiServer interface
type MockMessagingServiceApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingServiceApiServerMockRecorder
}

// MockMessagingServiceApiServerMockRecorder is the mock recorder for MockMessagingServiceApiServer
type MockMessagingServiceApiServerMockRecorder struct {
	mock *MockMessagingServiceApiServer
}

// NewMockMessagingServiceApiServer creates a new mock instance
func NewMockMessagingServiceApiServer(ctrl *gomock.Controller) *MockMessagingServiceApiServer {
	mock := &MockMessagingServiceApiServer{ctrl: ctrl}
	mock.recorder = &MockMessagingServiceApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagingServiceApiServer) EXPECT() *MockMessagingServiceApiServerMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockMessagingServiceApiServer) Status(arg0 context.Context, arg1 *empty.Empty) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockMessagingServiceApiServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).Status), arg0, arg1)
}

// SendInstantEmail mocks base method
func (m *MockMessagingServiceApiServer) SendInstantEmail(arg0 context.Context, arg1 *messaging_service.SendEmailReq) (*messaging_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInstantEmail", arg0, arg1)
	ret0, _ := ret[0].(*messaging_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInstantEmail indicates an expected call of SendInstantEmail
func (mr *MockMessagingServiceApiServerMockRecorder) SendInstantEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstantEmail", reflect.TypeOf((*MockMessagingServiceApiServer)(nil).SendInstantEmail), arg0, arg1)
}
